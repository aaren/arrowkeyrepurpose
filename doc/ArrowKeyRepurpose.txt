*ArrowKeyRepurpose.txt* Tiny plugin for repurposing the arrow keys.
For most vim versions. Help file last change: 2014-03-18

------------------------------------------------------------------------------
               ___                                  __ __                    ~
              /   |  ______________ _      __      / //_/__  __  __          ~
             / /| | / ___/ ___/ __ \ | /| / /_____/ ,< / _ \/ / / /          ~
            / ___ |/ /  / /  / /_/ / |/ |/ /_____/ /| /  __/ /_/ /           ~
           /_/  |_/_/  /_/   \____/|__/|__/     /_/ |_\___/\__, /            ~
                 ____                                     /____/             ~
		/ __ \___  ____  __  ___________  ____  ________             ~
               / /_/ / _ \/ __ \/ / / / ___/ __ \/ __ \/ ___/ _ \            ~
              / _, _/  __/ /_/ / /_/ / /  / /_/ / /_/ (__  )  __/            ~
             /_/ |_|\___/ .___/\__,_/_/  / .___/\____/____/\___/             ~
                       /_/              /_/                                  ~

           'Cause this plugin totally calls for elaborate ascii art

==============================================================================
CONTENTS                                          *ArrowKeyRepurpose-contents*
    1. Intro                         |ArrowKeyRepurpose|
    2. Mappings                      |ArrowKeyRepurpose-mappings|
    3. Settings                      |ArrowKeyRepurpose-settings|
    4. License                       |ArrowKeyRepurpose-license|

==============================================================================

INTRODUCTION                                               *ArrowKeyRepurpose*

A small simple plugin for repurposing the arrow keys in Vim. Taken from some
blog somewhere, which was in turn taken from an older version of
this page:

	http://vim.wikia.com/wiki/Quickly_adding_and_deleting_empty_lines

on the vim wiki, then modified and improved by myself.

This plugin is mostly for shifting your text around. Up and down move the
current line/selection thusly by adding and removing empty lines from above
it, and shift plus up and down will add and remove empty lines below. Right
and left unifies Vim's built-in mappings for indenting and unindenting in
normal, visual, and insert mode.

Though this plugin was originally meant mostly for myself, I hope I've
"polished" it up enough to give it the full "real plugin" status. Certain
edge/common cases (visual mode & closed folds) did not work properly in the
code as originally posted.

It's worth noting that I still keep my hands on the home row, even while
using these mappings, by use of a Windows program called touchcursor, found
here:

	http://touchcursor.sourceforge.net/

------------------------------------------------------------------------------
MAPPINGS                                          *ArrowKeyRepurpose-mappings*

While I hope the default mappings are sensible, and indeed are "eponymous" to
the plugin, many people will still want to have this plugin's functionality
without having to remove their hands from the home row. For this reason,
several settings are provided for controlling what gets mapped and whether it
does. See |ArrowKeyRepurpose-settings| for more information.

Below are the defaults and the <plug> mappings they are equivalent to. Note
the string "[mode]" on the end of the <plug> mappings. This is equivalent to
either "normal", "visual", or "insert". Please Note that remapping to the
insert versions requires prepending the <plug> mapping with <esc>.


<Left>
		Unindents current line, selection, or closed fold by one
		level. Works in normal, visual, and insert mode.


<Right>
		Indents current line, selection, or closed fold by one level.
		Works in normal, visual, and insert mode.


<Up>
<plug>ArrowKeyRepurp_DelEmptyLineAbove_[mode]

		If the line above the current cursor position, selection, or
		closed fold is empty (or contains only white space), deletes
		it.


<Down>
<plug>ArrowKeyRepurp_AddEmptyLineAbove_[mode]

		Adds an empty line above the current cursor position, closed
		fold, or selection.


<S-Up>
<plug>ArrowKeyRepurp_DelEmptyLineBelow_[mode]

		If the line below the current cursor position, selection, or
		closed fold is empty (or contains only white space), deletes
		it.


<S-Down>
<plug>ArrowKeyRepurp_AddEmptyLineBelow_[mode]

		Adds an empty line below the current cursor position,
		selection, or closed fold.

		Please note that this may work a little confusingly (but still
		correctly) in the event you use it with a closed fold that is
		not terminated by a fold-closing marker (assuming
		foldmethod=marker). Such fold regions, when appended with a
		blank line, will then include that blank line. Repeating this
		command may seem to have no effect, but the new lines are
		being added INSIDE the folded region. Because of this, the
		counterpart mapping (<S-Up>) will NOT remove them.


<S-Left>
		Decrease current window width by N (default 1). Just a remap
		of Vim's 'CTRL-W <'. Normal mode only.


<S-Right>
		Increase current window width by N (default 1). Just a remap
		of Vim's 'CTRL-W >'. Normal mode only.

------------------------------------------------------------------------------
SETTINGS                                          *ArrowKeyRepurpose-settings*

Settings for ArrowKeyRepurpose are contained in the dictionary
g:ArrowKeyRepurp_settings. This variable is not created until after your vimrc
is sourced, so create it and populate it with whatever (correctly formed)
values you want, and they will not be overwritten.

As a shorthand, the headings below are implicitly members of
g:ArrowKeyRepurp_settings. Their defaults are given.


do_map_arrows = 1

		Whether to map the arrow keys. This does not include whether
		shifted arrow keys will be mapped or not.


do_map_shift_updown = 1

		Whether to map <S-Up> and <S-Down>.


do_map_shift_leftright = 1

		Whether to map <s-left> and <s-right>. Considering the
		function of these keys is very different from that of the rest
		of the mappings, it makes a lot of sense that someone may want
		to turn off this functionality.

------------------------------------------------------------------------------
LICENSE                                            *ArrowKeyRepurpose-license*

Due to the origins of this code, I cannot be totally certain what license it
falls under (I suppose that information could be found by digging around on the
vim wiki as linked to above, in the introductory section of this documentation,
but eh).

Insofar as I have some purview in regard to licensing, I'm placing whatever
portion I am legally able to under the MIT license, as follows:

The MIT License (MIT)

Copyright (c) 2014 Tim Holt (atimholt@gmail.com)

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

------------------------------------------------------------------------------

 vim:tw=78:ts=8:ft=help:norl:
